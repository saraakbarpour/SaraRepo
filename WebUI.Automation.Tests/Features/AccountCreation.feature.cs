// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebUI.Automation.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Account Creation", new string[] {
            "Chrome"}, Description="\tAs a consumer\r\n\tI want to sign up for a zen account\r\n\tso that I can use Zen prod" +
        "ucts", SourceFile="Features\\AccountCreation.feature", SourceLine=1)]
    public partial class AccountCreationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AccountCreation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Account Creation", "\tAs a consumer\r\n\tI want to sign up for a zen account\r\n\tso that I can use Zen prod" +
                    "ucts", ProgrammingLanguage.CSharp, new string[] {
                        "Chrome"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Create an account successfully", SourceLine=6)]
        public virtual void CreateAnAccountSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an account successfully", ((string[])(null)));
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("I am on the \'Account Creation\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.And("I have filled out all my details correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("I have accepted the Terms of Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.When("I submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
  testRunner.Then("I am redirected to the \'Email Sent Confirmation\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
  testRunner.And("an account activation email is sent to my email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create a duplicate account", SourceLine=15)]
        public virtual void UnableToCreateADuplicateAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to create a duplicate account", ((string[])(null)));
#line 16
 this.ScenarioSetup(scenarioInfo);
#line 17
  testRunner.Given("I have already created my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
  testRunner.And("I have filled out all my details using the same email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
  testRunner.When("I submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
  testRunner.Then("I see a validation error \'Email address is already in use. Try another.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
  testRunner.And("a duplicate account is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UnableToCreateAnAccountWithInvalidDetails(string exampleDescription, string field, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to create an account with invalid details", exampleTags);
#line 24
 this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given(string.Format("I am creating account with an invalid \'{0}\'", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
  testRunner.When("I attempt to submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
  testRunner.Then("the submit button is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
  testRunner.And(string.Format("I see a validation error \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with invalid details, Email is invalid", SourceLine=31)]
        public virtual void UnableToCreateAnAccountWithInvalidDetails_EmailIsInvalid()
        {
#line 24
 this.UnableToCreateAnAccountWithInvalidDetails("Email is invalid", "Email", "Invalid email", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with invalid details, Password is invalid", SourceLine=31)]
        public virtual void UnableToCreateAnAccountWithInvalidDetails_PasswordIsInvalid()
        {
#line 24
 this.UnableToCreateAnAccountWithInvalidDetails("Password is invalid", "Password", "Use at least 6 characters. Include letters and numbers", ((string[])(null)));
#line hidden
        }
        
        public virtual void UnableToCreateAnAccountWithIncompleteDetails(string exampleDescription, string field, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to create an account with incomplete details", exampleTags);
#line 36
 this.ScenarioSetup(scenarioInfo);
#line 37
  testRunner.Given(string.Format("I am creating account with a missing \'{0}\'", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
  testRunner.When("I attempt to submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
  testRunner.Then("the submit button is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with incomplete details, Name is not filled", SourceLine=42)]
        public virtual void UnableToCreateAnAccountWithIncompleteDetails_NameIsNotFilled()
        {
#line 36
 this.UnableToCreateAnAccountWithIncompleteDetails("Name is not filled", "Name", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with incomplete details, Email is not filled", SourceLine=42)]
        public virtual void UnableToCreateAnAccountWithIncompleteDetails_EmailIsNotFilled()
        {
#line 36
 this.UnableToCreateAnAccountWithIncompleteDetails("Email is not filled", "Email", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with incomplete details, Password is not filled", SourceLine=42)]
        public virtual void UnableToCreateAnAccountWithIncompleteDetails_PasswordIsNotFilled()
        {
#line 36
 this.UnableToCreateAnAccountWithIncompleteDetails("Password is not filled", "Password", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with incomplete details, Confirm Password is not fill" +
            "ed", SourceLine=42)]
        public virtual void UnableToCreateAnAccountWithIncompleteDetails_ConfirmPasswordIsNotFilled()
        {
#line 36
 this.UnableToCreateAnAccountWithIncompleteDetails("Confirm Password is not filled", "Confirm Password", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with incomplete details, ToS not accepted", SourceLine=42)]
        public virtual void UnableToCreateAnAccountWithIncompleteDetails_ToSNotAccepted()
        {
#line 36
 this.UnableToCreateAnAccountWithIncompleteDetails("ToS not accepted", "Terms of Service", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("View Terms of Service during account creation", SourceLine=49)]
        public virtual void ViewTermsOfServiceDuringAccountCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Terms of Service during account creation", ((string[])(null)));
#line 50
 this.ScenarioSetup(scenarioInfo);
#line 51
  testRunner.Given("I am creating account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
  testRunner.When("I choose to view the Terms of Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
  testRunner.Then("I am presented with the Terms of Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
  testRunner.And("my account details are still in place", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unable to create an account with mismatch passwords", SourceLine=56)]
        public virtual void UnableToCreateAnAccountWithMismatchPasswords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unable to create an account with mismatch passwords", ((string[])(null)));
#line 57
 this.ScenarioSetup(scenarioInfo);
#line 58
  testRunner.Given("I am creating account with mismatch passwords", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
  testRunner.When("I attempt to submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
  testRunner.Then("the submit button is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
